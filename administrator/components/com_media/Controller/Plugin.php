<?php
/**
 * @package     Joomla.Administrator
 * @subpackage  com_media
 *
 * @copyright   Copyright (C) 2005 - 2017 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */

namespace Joomla\Component\Media\Administrator\Controller;

defined('_JEXEC') or die;

use Joomla\CMS\Controller\Controller;
use Joomla\CMS\Factory;
use Joomla\CMS\Plugin\PluginHelper;
use Joomla\CMS\Response\JsonResponse;
use Joomla\Component\Media\Administrator\Event\OAuthCallbackEvent;
use Joomla\Event\Dispatcher;

class Plugin extends Controller
{
	public function oauthcallback()
	{
		// Check for CSRF
		// \JSession::checkToken('get') or die( 'Invalid Token' );
		$input = $this->input->request->getArray();
		$pluginName = $this->input->request->getString('plugin', null);
		$plugins = PluginHelper::getPlugin('filesystem');

		// If plugin name was not found in parameters redirect back to control panel
		if (!$pluginName || !$this->containsPlugin($plugins, $pluginName))
		{
			$this->displayResponse('Plugin not found!.', 'error');
		}

		// Check if the plugin is disabled
		if (!PluginHelper::isEnabled('filesystem', $pluginName))
		{
			$this->displayResponse('Plugin ' . $pluginName . ' is disabled.', 'error');
		}

		try{
			// Only import our required plugin
			PluginHelper::importPlugin('filesystem');

			$eventParameters = array($pluginName, $input);
			$event = new OAuthCallbackEvent('onFilesystemOAuthCallback', $eventParameters);

			$results = \JFactory::getApplication()->triggerEvent('onFilesystemOAuthCallback', $eventParameters);
			$some = 'ok';
		}
		catch (\Exception $e)
		{
			$this->displayResponse($e->getMessage(), 'error');
		}


		//$this->setRedirect(\JRoute::_('index.php?option=com_media&view=plugin', false));
		//$this->redirect();
	}

	private function displayResponse($message, $type, $redirect = 'index.php')
	{
		Factory::getApplication()->enqueueMessage($message, $type);

		if ($redirect)
		{
			$this->setRedirect(\JRoute::_($redirect, false));
			$this->redirect();
		}

	}

	private function containsPlugin($plugins, $needle)
	{
		foreach ($plugins as $plugin)
		{
			if ($plugin->name == $needle)
				return true;
		}

		return false;
	}


	private function displayError()
	{

	}


	/**
	 * @param string $name
	 * @param string $prefix
	 * @param array  $config
	 *
	 * @return bool|Model
	 */
	public function getModel($name = 'Plugin', $prefix = 'Administrator', $config = array() )
	{
		return parent::getModel( $name, $prefix, $config ); // TODO: Change the autogenerated stub
	}

	protected function sendResponse($data = null, $responseCode = 200)
	{
		// Set the correct content type
		\JFactory::getApplication()->setHeader('Content-Type', 'application/json');

		// Set the status code for the response
		http_response_code($responseCode);

		// Send the data
		echo new JsonResponse($data);
	}
}