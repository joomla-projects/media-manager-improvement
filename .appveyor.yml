build: false
platform:
  - x64
clone_folder: C:\projects\joomla-cms
## Build matrix for lowest and highest possible targets
environment:
  matrix:
  - php_ver_target: 5.6
  - php_ver_target: 7.0
  - php_ver_target: 7.1

init:
  - SET PATH=C:\Program Files\OpenSSL;C:\tools\php;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET PHP=1 # This var relates to caching the php  install
  - SET ANSICON=121x90 (121x90)
services:
  - mssql2014
  - mysql
  - postgresql94
  - iis

## Install PHP and composer, and run the appropriate composer command
install:
    - IF EXIST C:\tools\php (SET PHP=0)
    - ps: >-
        If ($env:php_ver_target -eq "5.6") {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y --forcex86 php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_ver_target | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
          $VC = "vc11"
          $PHPBuild = "x86"
        } Else {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_ver_target | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
          $VC = "vc14"
          $PHPBuild = "x64"
        }
    - cinst -y sqlite
    - cd C:\tools\php
    # Get the MSSQL DLL's
    - ps: >-
        If ($env:PHP -eq "1") {
          If ($env:php_ver_target -eq "5.6") {
            appveyor DownloadFile https://files.nette.org/misc/php-sqlsrv.zip
            7z x -y php-sqlsrv.zip > $null
            copy SQLSRV\php_sqlsrv_56_nts.dll ext\php_sqlsrv_nts.dll
            copy SQLSRV\php_pdo_sqlsrv_56_nts.dll ext\php_pdo_sqlsrv_nts.dll
            Remove-Item C:\tools\php\* -include .zip
          } Else {
            $DLLVersion = "4.1.6.1"
            cd c:\tools\php\ext
            appveyor-retry appveyor DownloadFile http://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php_ver_target)-nts-vc14-x64.zip
            7z x -y php_sqlsrv-$($DLLVersion)-$($env:php_ver_target)-nts-vc14-x64.zip > $null
            appveyor-retry appveyor DownloadFile http://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php_ver_target)-nts-vc14-x64.zip
            7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php_ver_target)-nts-vc14-x64.zip > $null
            Remove-Item c:\tools\php\ext* -include .zip
            cd c:\tools\php}}
    - IF %PHP%==1 copy php.ini-production php.ini /Y
    - IF %PHP%==1 echo date.timezone="UTC" >> php.ini
    - IF %PHP%==1 echo extension_dir=ext >> php.ini
    - IF %PHP%==1 echo extension=php_openssl.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mbstring.dll >> php.ini
    - IF %PHP%==1 echo extension=php_fileinfo.dll >> php.ini
    - IF %PHP%==1 echo extension=php_gd2.dll >> php.ini
    - ps: >-
        If ($env:php_ver_target -eq "5.6") {
          Add-Content php.ini "`nextension=php_sqlsrv_nts.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv_nts.dll"
          Add-Content php.ini "`n"
        } Else {
          Add-Content php.ini "`nextension=php_sqlsrv.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv.dll"
          Add-Content php.ini "`n"
        }
    - IF %PHP%==1 echo extension=php_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_sqlite.dll >> php.ini
    - IF %PHP%==1 echo extension=php_sqlite3.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_mysql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mysqli.dll >> php.ini
    - IF %PHP%==1 echo extension=php_curl.dll >> php.ini
    # Get the Wincache DLLs
    - ps: >-
        If ($env:PHP -eq "1") {
          If ($env:php_ver_target -eq "5.6") {$wincache = "1.3.7.12"} Else {$wincache = "2.0.0.8"}
          cd c:\tools\php\ext
          appveyor DownloadFile http://windows.php.net/downloads/pecl/releases/wincache/$($wincache)/php_wincache-$($wincache)-$($env:php_ver_target)-nts-$($VC)-$($PHPBuild).zip
          7z x -y php_wincache-$($wincache)-$($env:php_ver_target)-nts-$($VC)-$($PHPBuild).zip > $null
          Remove-Item C:\tools\php\ext* -include .zip
          cd c:\tools\php}
    - IF %PHP%==1 echo extension=php_wincache.dll >> php.ini
    - IF %PHP%==1 echo wincache.enablecli = 1 >> php.ini
    - IF %PHP%==1 echo zend_extension=php_opcache.dll >> php.ini
    - IF %PHP%==1 echo opcache.enable_cli=1 >> php.ini
    - IF %PHP%==1 echo @php %%~dp0composer.phar %%* > composer.bat
    - appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar
    - cd C:\projects\joomla-cms
    - appveyor-retry composer install --no-progress --profile

before_test:
#  Database setup for MySQL via PowerShell tools
  - >
    "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -u root -p"Password12!" -e "CREATE DATABASE IF NOT EXISTS joomla_ut;"
  - >
    "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -u root -p"Password12!" joomla_ut < tests\unit\schema\mysql.sql

#  Database setup for PostgreSQL
  - SET PGUSER=postgres
  - SET PGPASSWORD=Password12!
  - PATH=C:\Program Files\PostgreSQL\9.4\bin\;%PATH%
  - createdb joomla_ut
  - psql -d joomla_ut -a -f tests\unit\schema\postgresql.sql

# Database setup for SQL Server
  - ps: $sqlInstance = "(local)\SQL2014"
  - ps: sqlcmd -b -E -S "$sqlInstance" -Q "CREATE DATABASE joomla_ut"
  - ps: sqlcmd -S "$sqlInstance" -U "sa" -P "Password12!" -i $env:APPVEYOR_BUILD_FOLDER\tests\unit\schema\sqlsrv.sql

test_script:
  - cd C:\projects\joomla-cms
  - libraries/vendor/bin/phpunit -c appveyor-phpunit.xml
